use std::{
    cell::{Cell, RefCell},
    io::Error,
};

fn main() {
    let input = parse_input().unwrap();

    let mut scratchcards: Vec<RefCell<(usize, usize, usize)>> = vec![];

    input
        .split('\n')
        .enumerate()
        .map(|(index, line)| (index, line.replace(&format!("Card {}: ", index + 1), "")))
        .for_each(|(index, line)| {
            let splitted = line.split(" | ").collect::<Vec<&str>>();
            let numbers = get_numbers(splitted[0]);
            let winning = get_numbers(splitted[1]);

            let mut scratchcards_won: usize = 0;

            numbers.iter().for_each(|num| {
                winning.iter().for_each(|win| {
                    if num == win {
                        scratchcards_won += 1;
                    }
                })
            });

            scratchcards.push(RefCell::new((index, scratchcards_won, 0)));
        });

    // let mut result: Vec<(usize, usize)> = vec![];

    // for i in 0..scratchcards.len() {
    //     result.push((i, 1));
    // }

    // println!("{:?}", scratchcards);
    // return;

    for cell in &scratchcards {
        let cell_value = cell.take();
        println!("{:?}", cell_value);
        let (card_index, cards_won_count, mut copy) = cell_value;

        for i in card_index + 1..card_index + cards_won_count - 1 {
            copy += 1;

            scratchcards[i].replace((card_index, cards_won_count, copy));
        }
    }

    println!(
        "{:?}",
        scratchcards // .iter()
                     // .map(|val| val.take())
                     // .map(|val| (val.0 + 1, val.1))
                     // .collect::<Vec<(usize, usize)>>()
    );
}

/*
    (1, 1)
    (2, 2),
    (3, 4),
    (4, 8),
    (5, 14),
    (6, 1)
*/

fn get_numbers(numbers: &str) -> Vec<usize> {
    let mut result = vec![];

    numbers.split(" ").for_each(|num| {
        if let Ok(number) = num.parse::<usize>() {
            result.push(number);
        }
    });

    result
}

fn parse_input() -> Result<String, Error> {
    std::fs::read_to_string("input.txt".to_string())
}
